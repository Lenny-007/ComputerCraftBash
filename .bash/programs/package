-- package program -> package

local args = {...}
fs.makeDir("/.bash/packages")
fs.makeDir("/.bash/downloads")

if #args < 1 then
  bash.console_error("usage: package <mode> ... ")
  return
end

if args[1] == "new" then
  
  if args[2] == nil then
    bash.console_error("usage: package new <name> ")
    return
  else
    if fs.exists("/.bash/packages/"..args[2]) then
      bash.console_error("package already exists")
      return
    else
      local file = fs.open("/.bash/packages/"..args[2],"w")
      file.close()
      bash.console_print("package \'"..args[2].."\' has been created")
    end
  end

elseif args[1] == "add" then
  
  if #args < 3 then
    bash.console_error("usage: package add <package> <path>")
    return
  else
    if fs.exists("/.bash/packages/"..args[2]) then
      local file
      if fs.exists(args[3]) then
        file = args[3]
      elseif fs.exists(shell.dir().."/"..args[3]) then
        file = shell.dir().."/"..args[3]
      else
        bash.console_error("no such file")
        return
      end
      local package = fs.open("/.bash/packages/"..args[2],"r")
      local data    = textutils.unserialize(package.readAll())
      if type(data) ~= "table" then
        data = {}
      end
      table.insert(data,shell.resolve(file))
      data = textutils.serialize(data)
      package.close()
      fs.delete("/.bash/packages/"..args[2])
      local newpackage = fs.open("/.bash/packages/"..args[2],"w")
      newpackage.write(data)
      newpackage.close()
      bash.console_print("file has been added to: "..args[2])
    else
      bash.console_error("package does not exist")
      return
    end
  end

elseif args[1] == "erase" then

  if #args < 3 then
    bash.console_error("usage: package erase <package> <path>")
    return
  else
    if fs.exists("/.bash/packages/"..args[2]) then
      local package = fs.open("/.bash/packages/"..args[2],"r")
      local data    = textutils.unserialize(package.readAll())
      package.close()
      if type(data) ~= "table" then
        bash.console_error("this package is empty")
        return
      else
        local newdata = {}
        for i = 1,#data,1 do
          if data[i] ~= shell.resolve(args[3]) then
            table.insert(newdata,data[i])
          end
        end
        data = textutils.serialize(newdata)
        fs.delete("/.bash/packages/"..args[2])
        local newpackage = fs.open("/.bash/packages/"..args[2],"w")
        newpackage.write(data)
        newpackage.close()
      end
    else
      bash.console_error("no such package")
      return
    end
  end

elseif args[1] == "remove" then

  if args[2] == nil then
    bash.console_error("usage: package remove <package>")
    return
  else
    if fs.exists("/.bash/packages/"..args[2]) then
      fs.delete("/.bash/packages/"..args[2])
      bash.console_print("package \'"..args[2].."\' has been deleted")
    else
      bash.console_error("no such package")
      return
    end
  end

elseif args[1] == "list" then

  local list = fs.list("/.bash/packages")
  bash.console_systemprint("saved packages on this machine: ")
  term.setTextColor(colors.white)
  textutils.pagedTabulate(list)

elseif args[1] == "info" then

  if args[2] == nil then
    bash.console_error("usage: package info <package>")
  else
    if fs.exists("/.bash/packages/"..args[2]) then
      local package = fs.open("/.bash/packages/"..args[2],"r")
      local data    = textutils.unserialize(package.readAll())
      package.close()
      bash.console_systemprint("files in package \'"..args[2].."\': ")
      if type(data) == "table" then
        if #data == 0 then
          bash.console_print("empty package")
        else
          for i in pairs(data) do
            bash.console_print(data[i])
          end
        end
      else
        bash.console_print("empty package")
      end
    else
      bash.console_error("no such package")
    end
  end

elseif args[1] == "send" then

  if #args < 3 then
    bash.console_error("usage: package send <id> <package>")
    return
  else
    if fs.exists("/.bash/packages/"..args[3]) then
      local file = fs.open("/.bash/packages/"..args[3],"r")
      local package = textutils.unserialize(file.readAll())
      file.close()
      if type(package) ~= "table" or #package < 1 then
        bash.console_error("empty package")
        return
      else
        local send  = {}
        send.action = "push"
        send.name   = args[3]
        send.files  = {}
        local complete = true
        for i = 1,#package,1 do
          if fs.exists("/"..package[i]) then
            local file = fs.open("/"..package[i],"r")
            local data = file.readAll()
            file.close()
            send.files[fs.getName(package[i])] = data
          else
            complete = false
          end
        end
        if not complete then
          bash.console_print("Can't find some files!")
          bash.console_print("Are you sure you want to send the package?")
          write("yes/no")
          local result = read()
          if result ~= "yes" then
            bash.console_error("operation has been canceled")
            return
          end
        end
        send = textutils.serialize(send)
        rednet.send(tonumber(args[2]),send,"bppfs_main")
        bash.console_print("package has been sended to the server")
      end
    else
      bash.console_error("no such package")
      return
    end
  end

elseif args[1] == "pull" then

  if #args < 3 then
    bash.console_error("usage: package pull <host/id> <package>")
    return
  else
    local dest = tonumber(args[2])
    if dest == nil then
      dest = rednet.lookup(args[2])
      if dest == nil then
        bash.console_error("no such host/id")
      end
    end
    local  send = {}
    send.action = "pull"
    send.name   = args[3]
    send = textutils.serialize(send)
    rednet.send(dest,send,"bppfs_main")
    id,msg = rednet.receive("bppfs_download",5)
    if id == nil then
      bash.console_error("no response from server")
    else
      msg = textutils.unserialize(msg)
      fs.makeDir("/.bash/downloads/"..args[3])
      local package = {}
      for i in pairs(msg.files) do
        local file = fs.open("/.bash/downloads/"..args[3].."/"..i,"w")
        file.write(msg.files[i])
        file.close()
        table.insert(package,"/.bash/downloads/"..i)
      end
    end
  end

elseif args[1] == "remote" then
  
  if args[2] == "list" then
    if #args < 3 then
      bash.console_error("usage: package remote list <id/host>")
    else
      local id 
      if tonumber(args[3]) == nil then
        if rednet.lookup(args[3]) == nil then
          bash.console_error("no such id/host")
          return
        else
          id = rednet.lookup(args[3])
        end
      else
        id = tonumber(args[3])
      end
      local send  = {}
      send.action = "list"
      send = textutils.serialize(send)
      rednet.send(id,send,"bppfs_main")
      local i,m   = rednet.receive("bppfs_packages",5)
      if i == nil then
        bash.console_error("no response form server")
        return
      else
        m = textutils.unserialize(m)
        bash.console_systemprint("packages on the server")
        for i = 1,#m,1 do
          bash.console_print(m[i])
        end
      end
    end
  elseif args[2] == "remove" then
    if #args < 4 then
      bash.console_error("usage: package remote remove <id/host> <package>")
    else
      local ok,id = tools.getID(args[3])
      if ok then
        local send   = {}
        send.action  = "remove"
        send.package = args[4]
        send = textutils.serialize(send)
        rednet.send(id,send,"bppfs_main")
        bash.console_print("remove request has been sended to the server")
        local i,m = rednet.receive("bppfs_remove")
        if m == "removed" then
          bash.console_print("package has been removed from the server")
        else
          if m == nil then
            bash.console_error("no response from server")
          else
            bash.console_error("no such package (server)")
          end
        end
      else
        bash.console_error("no such id/host")
      end
    end
  else
    bash.console_error("usage: package remote <mode> ...")
  end

elseif args[1] == "downloads" then

  local list = fs.list("/.bash/downloads")
  bash.console_systemprint("All downloaded packages:")
  for i in pairs(list) do
    if fs.isDir("/.bash/downloads/"..list[i]) then
      bash.console_print(list[i])
    end
  end

else

  bash.console_error("no such mode: "..args[1])

end
